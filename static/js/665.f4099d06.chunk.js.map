{"version":3,"file":"static/js/665.f4099d06.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/contactsForm/ContactsForm.jsx","components/contactsList/ContactsList.jsx","components/filter/Filter.jsx","pages/contacts/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport { useFormik } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  useToast,\n} from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const toast = useToast();\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    onSubmit: values => {\n      if (isContactDuplicate(values.name)) {\n        toast({\n          title: values.name + ' is already in contacts.',\n          status: 'warning',\n          isClosable: true,\n          duration: 3000,\n          position: 'top',\n        });\n        return;\n      }\n\n      dispatch(addContact(values));\n      formik.resetForm();\n    },\n  });\n\n  const isContactDuplicate = name => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  return (\n    <Box w={500} borderRadius={10} py={3}>\n      <form onSubmit={formik.handleSubmit}>\n        <FormControl isRequired px={5}>\n          <FormLabel htmlFor=\"email\">Name</FormLabel>\n          <Input\n            id=\"name\"\n            name=\"name\"\n            type=\"name\"\n            variant=\"filled\"\n            onChange={formik.handleChange}\n            value={formik.values.name}\n          />\n        </FormControl>\n        <FormControl isRequired px={5}>\n          <FormLabel htmlFor=\"number\">Phone</FormLabel>\n          <Input\n            id=\"number\"\n            name=\"number\"\n            type=\"number\"\n            variant=\"filled\"\n            onChange={formik.handleChange}\n            value={formik.values.number}\n          />\n        </FormControl>\n        <Flex justifyContent={'center'} mt={5}>\n          <Button type=\"submit\" colorScheme=\"orange\" mt={15} w={140}>\n            Add contact\n          </Button>\n        </Flex>\n      </form>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts, deleteContact } from '../../redux/contacts/operations';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from '../../redux/contacts/selectors';\nimport { Button, WrapItem, Wrap } from '@chakra-ui/react';\n\nconst ContactList = () => {\n  let contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDeleteOnClick = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <Wrap display={'flex'} direction={'column'}>\n      {!isLoading &&\n        !error &&\n        contacts.length > 0 &&\n        contacts.map(contact => {\n          return (\n            <WrapItem\n              key={contact.id}\n              w={500}\n              justifyContent={'space-around'}\n              alignItems={'center'}\n              pt={3}\n            >\n              <span style={{ width: '300px' }}>\n                {contact.name} : {contact.number}\n              </span>\n              <Button\n                type=\"button\"\n                onClick={() => handleDeleteOnClick(contact.id)}\n              >\n                Delete\n              </Button>\n            </WrapItem>\n          );\n        })}\n    </Wrap>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contactsSlice';\nimport { Box, FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleOnChange = event => {\n    const filter = event.target.value;\n    dispatch(setFilter(filter));\n  };\n\n  return (\n    <>\n      <Box\n        w={500}\n        display={'flex'}\n        alignItems={'center'}\n        flexDirection={'column'}\n      >\n        <FormControl px={5} py={5}>\n          <FormLabel htmlFor=\"email\">Find contacts by name:</FormLabel>\n          <Input\n            id=\"filter\"\n            name=\"filter\"\n            type=\"filter\"\n            variant=\"filled\"\n            onChange={handleOnChange}\n          />\n        </FormControl>\n      </Box>\n    </>\n  );\n};\n\nexport default Filter;\n","import { Box, Flex } from '@chakra-ui/react';\nimport ContactsForm from '../../components/contactsForm';\nimport ContactsList from '../../components/contactsList';\nimport Filter from 'components/filter/Filter';\n\nconst ContactsPage = () => {\n  return (\n    <Flex\n      flexDirection={'column'}\n      justifyContent={'center'}\n      alignItems={'center'}\n      mt={75}\n    >\n      <Box bg=\"#e3cbb7\" borderRadius={15} pb={7}>\n        <ContactsForm />\n        <Filter />\n        <ContactsList />\n      </Box>\n    </Flex>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","filter","createSelector","contact","name","toLowerCase","includes","trim","dispatch","useDispatch","useSelector","toast","useToast","formik","useFormik","initialValues","number","onSubmit","values","isContactDuplicate","title","status","isClosable","duration","position","addContact","resetForm","some","_jsx","Box","w","borderRadius","py","children","_jsxs","handleSubmit","FormControl","isRequired","px","FormLabel","htmlFor","Input","id","type","variant","onChange","handleChange","value","Flex","justifyContent","mt","Button","colorScheme","error","useEffect","fetchContacts","Wrap","display","direction","length","map","WrapItem","alignItems","pt","style","width","onClick","contactId","deleteContact","_Fragment","flexDirection","event","target","setFilter","bg","pb","ContactsForm","Filter","ContactsList"],"sourceRoot":""}